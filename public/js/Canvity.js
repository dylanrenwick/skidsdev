!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=1)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this.container=t}return t.prototype.Add=function(t){return!this.Contains(t)&&(this.container.push(t),!0)},t.prototype.Remove=function(t){if(!this.Contains(t))return!1;var e=this.container.indexOf(t);return this.container.splice(e,1),!0},Object.defineProperty(t.prototype,"Count",{get:function(){return this.container.length},enumerable:!0,configurable:!0}),t.prototype.Contains=function(t){return this.container.indexOf(t)>=0},t.prototype.forEach=function(t,e){this.container.forEach(t,e)},t.prototype.filter=function(e,n){return t.FromArray(this.container.filter(e,n))},t.prototype.map=function(e,n){return t.FromArray(this.container.map(e,n))},t.prototype.ToArray=function(){return this.container},t.FromArray=function(e){var n=new t;return n.container=e,n},t}();e.HashSet=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(2),o=n(13);window.addEventListener("load",function(t){var e=document.getElementById("canvity-canvas");if(null!==e)if(e instanceof HTMLCanvasElement){var n=new r.Game(e);o.StartApp(n)}else console.error("Element with id 'canvity-canvas' is not a HTML Canvas!");else console.error("Could not find canvas element with id 'canvity-canvas'!")})},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(3),a=n(7),s=n(9),c=function(t){function e(e){return t.call(this,e,a.InputManager.Instance,s.SceneManager.Instance)||this}return o(e,t),e.prototype.PreInit=function(e){t.prototype.PreInit.call(this,e),console.log("PreInit")},e.prototype.Init=function(e,n){t.prototype.Init.call(this,e,n),console.log("Init")},e.prototype.PostInit=function(){t.prototype.PostInit.call(this),console.log("PostInit")},e}(i.App);e.Game=c},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(4),o=n(5),i=n(6),a=function(){function t(e,n,r){this.pausedTimeScale=0,this.timeScale=1,this.paused=!1,this.startTime=(new Date).getTime()/1e3,this.lastDraw=this.startTime,this.lastUpdate=this.startTime,this.canvas=e,t.instance=this,this.inputManager=n,this.sceneManager=r}return Object.defineProperty(t,"renderContext",{get:function(){return t.instance.ctx},enumerable:!0,configurable:!0}),Object.defineProperty(t,"renderContext2d",{get:function(){return t.renderContext instanceof r.RenderingContext2D?t.renderContext:null},enumerable:!0,configurable:!0}),Object.defineProperty(t,"renderContextWebGL",{get:function(){return t.renderContext instanceof o.RenderingContextWebGL?t.renderContext:null},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"DrawInterval",{set:function(t){this.drawInterval=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"UpdateInterval",{set:function(t){this.updateInterval=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"ActualRuntime",{get:function(){return(new Date).getTime()/1e3-this.startTime},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"Runtime",{get:function(){return(new Date).getTime()/1e3-this.startTime},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"Paused",{get:function(){return this.paused},enumerable:!0,configurable:!0}),t.prototype.PreInit=function(t){switch(t.renderTarget||(t.renderTarget="2d"),t.renderTarget.toLowerCase()){case"2d":this.ctx=new r.RenderingContext2D(this.canvas);break;case"gl":case"webgl":case"opengl":this.ctx=new o.RenderingContextWebGL(this.canvas)}},t.prototype.Init=function(t,e){this.inputManager.Init(),this.sceneManager.Init(this.canvas,this.ctx)},t.prototype.PostInit=function(){},t.prototype.Draw=function(){var e=(new Date).getTime()/1e3,n=e-this.lastDraw,r=new i.Time(this.Runtime,this.ActualRuntime,n,this.timeScale);t.CurrentDrawTime=r,this.lastDraw=e,this.sceneManager.Draw(r)},t.prototype.Update=function(){var e=(new Date).getTime()/1e3,n=e-this.lastUpdate;this.runtime+=n*this.timeScale;var r=new i.Time(this.Runtime,this.ActualRuntime,n,this.timeScale);t.CurrentUpdateTime=r,this.lastUpdate=e,this.sceneManager.Update(r)},t.prototype.Pause=function(){this.paused||(this.pausedTimeScale=this.timeScale,this.timeScale=0,this.paused=!0)},t.prototype.Unpause=function(){this.paused&&(this.timeScale=this.pausedTimeScale,this.pausedTimeScale=0,this.paused=!1)},t}();e.App=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t){this.canvas=t;var e=t.getContext("2d");if(null===e)throw new Error("Could not get 2d rendering context");this.ctx=e}return Object.defineProperty(t.prototype,"contextWidth",{get:function(){return this.canvas.width},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"contextHeight",{get:function(){return this.canvas.height},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"context",{get:function(){return this.ctx},enumerable:!0,configurable:!0}),t.prototype.draw=function(t){},t.prototype.drawRect=function(t,e){this.drawRectFromCoords(t.X,t.Y,t.W,t.H,e)},t.prototype.drawRectFromCoords=function(t,e,n,r,o){this.startCanvasWorkspace({fillStyle:o.CssString}),this.ctx.fillRect(t,e,n,r),this.endCanvasWorkspace()},t.prototype.drawPoly=function(t,e){this.startCanvasWorkspace({fillStyle:e.CssString}),this.ctx.beginPath(),this.moveTo(t[0]);for(var n=1;n<t.length;n++)this.lineTo(t[n]);this.ctx.fill(),this.endCanvasWorkspace()},t.prototype.strokeRect=function(t,e,n){this.strokeRectFromCoords(t.X,t.Y,t.W,t.H,e,n)},t.prototype.strokeRectFromCoords=function(t,e,n,r,o,i){this.startCanvasWorkspace({strokeStyle:o.CssString,lineWidth:i}),this.ctx.strokeRect(t,e,n,r),this.endCanvasWorkspace()},t.prototype.drawSprite=function(t,e,n){this.ctx.drawImage(t.Image,e,n)},t.prototype.drawTintedSprite=function(t,e,n,r){var o=this.createBufferCanvas(t.Image.width,t.Image.height);o.ctx.fillStyle=r.CssString,o.ctx.fillRect(0,0,o.canvas.width,o.canvas.height),o.ctx.globalCompositeOperation="destination-atop",o.ctx.drawImage(t.Image,0,0),this.ctx.drawImage(t.Image,e,n),this.startCanvasWorkspace({globalAlpha:.5}),this.ctx.drawImage(o.canvas,e,n),this.endCanvasWorkspace()},t.prototype.drawText=function(t,e,n,r){this.drawTextWithFont(t,e,n,"14px sans-serif",r)},t.prototype.drawTextWithFont=function(t,e,n,r,o){this.startCanvasWorkspace({font:r,fillStyle:o.CssString}),this.ctx.fillText(t,e,n),this.endCanvasWorkspace()},t.prototype.drawLine=function(t,e,n,r){this.drawLineFromCoords(t.X,t.Y,e.X,e.Y,n,r)},t.prototype.drawLineFromCoords=function(t,e,n,r,o,i){this.startCanvasWorkspace({strokeStyle:o.CssString,lineWidth:i}),this.ctx.beginPath(),this.ctx.moveTo(t,e),this.ctx.lineTo(n,r),this.ctx.stroke(),this.endCanvasWorkspace()},t.prototype.createBufferCanvas=function(t,e){if(null==this.buffer){var n=document.createElement("canvas");n.width=t,n.height=e;var r=n.getContext("2d");this.buffer={canvas:n,ctx:r}}else this.buffer.canvas.width=t,this.buffer.canvas.height=e;return this.buffer},t.prototype.startCanvasWorkspace=function(t){var e={};for(var n in t)void 0!==this.ctx[n]&&(e[n]=this.ctx[n]);this.applyCanvasOpts(t),this.storedWorkspaceOpts=e},t.prototype.endCanvasWorkspace=function(){this.applyCanvasOpts(this.storedWorkspaceOpts)},t.prototype.applyCanvasOpts=function(t){for(var e in t)void 0!==this.ctx[e]&&(this.ctx[e]=t[e])},t.prototype.moveTo=function(t){this.ctx.moveTo(t.X,t.Y)},t.prototype.lineTo=function(t){this.ctx.lineTo(t.X,t.Y)},t}();e.RenderingContext2D=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t){this.canvas=t;var e=t.getContext("webgl2");if(!(e instanceof WebGLRenderingContext))throw new Error("Could not get WebGL2 context");this.gl=e}return Object.defineProperty(t.prototype,"contextWidth",{get:function(){return this.canvas.width},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"contextHeight",{get:function(){return this.canvas.height},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"context",{get:function(){return this.gl},enumerable:!0,configurable:!0}),t.prototype.draw=function(t){},t.prototype.drawRect=function(t,e){throw new Error("Method not implemented.")},t.prototype.drawRectFromCoords=function(t,e,n,r,o){throw new Error("Method not implemented.")},t.prototype.drawPoly=function(t,e){throw new Error("Method not implemented.")},t.prototype.strokeRect=function(t,e,n){throw new Error("Method not implemented.")},t.prototype.strokeRectFromCoords=function(t,e,n,r,o,i){throw new Error("Method not implemented.")},t.prototype.drawSprite=function(t,e,n){throw new Error("Method not implemented.")},t.prototype.drawTintedSprite=function(t,e,n,r){throw new Error("Method not implemented.")},t.prototype.drawText=function(t,e,n,r){throw new Error("Method not implemented.")},t.prototype.drawTextWithFont=function(t,e,n,r,o){throw new Error("Method not implemented.")},t.prototype.drawLine=function(t,e,n,r){throw new Error("Method not implemented.")},t.prototype.drawLineFromCoords=function(t,e,n,r,o,i){throw new Error("Method not implemented.")},t}();e.RenderingContextWebGL=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e,n,r){this.time=t,this.actualTime=e,this.deltaTime=n,this.timeScale=r}return Object.defineProperty(t.prototype,"DeltaTime",{get:function(){return this.deltaTime*this.TimeScale},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"ActualDeltaTime",{get:function(){return this.deltaTime},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"Time",{get:function(){return this.time},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"ActualTime",{get:function(){return this.actualTime},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"TimeScale",{get:function(){return this.timeScale},enumerable:!0,configurable:!0}),t}();e.Time=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(8),o=function(){function t(){}return Object.defineProperty(t,"Instance",{get:function(){return null==this.instance?this.instance=new t:this.instance},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"MousePos",{get:function(){return this.mousePos},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"MouseDelta",{get:function(){return this.mouseDelta},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"IsLeftButtonDown",{get:function(){return 0!=(1&this.downButtons)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"IsRightButtonDown",{get:function(){return 0!=(2&this.downButtons)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"IsMiddleButtonDown",{get:function(){return 0!=(4&this.downButtons)},enumerable:!0,configurable:!0}),t.prototype.Init=function(){this.downButtons=0,this.mousePos=new r.Vector2,this.mouseDelta=new r.Vector2,this.downButtons=0,document.addEventListener("mousemove",this.HandleMouseMove),document.addEventListener("mousedown",this.HandleMouseDown),document.addEventListener("mouseup",this.HandleMouseUp)},t.prototype.HandleMouseMove=function(t){t.preventDefault(),this.mousePos=new r.Vector2(t.pageX,t.pageY),this.mouseDelta=new r.Vector2(t.movementX,t.movementY)},t.prototype.HandleMouseDown=function(t){t.preventDefault();t.buttons,this.downButtons;this.downButtons=t.buttons},t.prototype.HandleMouseUp=function(t){t.preventDefault();this.downButtons,t.buttons;this.downButtons=t.buttons},t}();e.InputManager=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){void 0===t&&(t=0),void 0===e&&(e=0),this.X=t,this.Y=e}return Object.defineProperty(t.prototype,"Magnitude",{get:function(){return Math.sqrt(Math.pow(this.X,2)+Math.pow(this.Y,2))},set:function(t){this.Normalize().Multiply(t)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"Distance",{get:function(){return this.Magnitude},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"Direction",{get:function(){return Math.atan(this.X/this.Y)*(180/Math.PI)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"Normalized",{get:function(){return new t(this.X,this.Y).Normalize()},enumerable:!0,configurable:!0}),t.prototype.Add=function(e){return new t(this.X+e.X,this.Y+e.Y)},t.prototype.Sub=function(e){return new t(this.X-e.X,this.Y-e.Y)},t.prototype.Multiply=function(e){return new t(this.X*e,this.Y*e)},t.prototype.Normalize=function(){var t=Math.max(this.X,this.Y);return this.X/=t,this.Y/=t,this},t}();e.Vector2=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(10),o=n(0),i=function(){function t(){}return Object.defineProperty(t,"Instance",{get:function(){return null==this.instance?this.instance=new t:this.instance},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"Canvas",{get:function(){return this.canvas},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"Context",{get:function(){return this.ctx},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"CurrentScene",{get:function(){return this.currentScene},enumerable:!0,configurable:!0}),t.prototype.Init=function(t,e){this.canvas=t,this.ctx=e,this.scenes=new o.HashSet;var n=new r.Scene;this.AddScene(n),this.SwitchScene(n)},t.prototype.AddScene=function(t){if(!this.scenes.Add(t))throw Error("Attempted to add Scene that was already added!")},t.prototype.RemoveScene=function(t){this.scenes.Remove(t)},t.prototype.SwitchScene=function(t){if(!this.scenes.Contains(t))throw Error("Attempted to switch to Scene that does not exist!");this.currentScene=t},t.prototype.Draw=function(t){null!==this.currentScene&&void 0!==this.currentScene&&(this.currentScene.Draw(t,this.ctx),this.ctx.draw(t))},t.prototype.Update=function(t){null!==this.currentScene&&void 0!==this.currentScene&&this.currentScene.Update(t)},t}();e.SceneManager=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(11),o=n(12),i=n(0),a=function(){function t(){this.componentManagers=new i.HashSet,this.Background=o.Color.Transparent,this.started=!1}return Object.defineProperty(t.prototype,"Background",{get:function(){return this.background},set:function(t){this.background=t},enumerable:!0,configurable:!0}),t.prototype.GetComponentManager=function(t){var e=this.componentManagers.filter(function(e){return e.Type===t}).ToArray();return 0===e.length?null:e[0]},t.prototype.Draw=function(t,e){var n=this;this.started&&this.systems.forEach(function(r){r.Draw(t,e,n.GetAspects.apply(n,r.AspectType))})},t.prototype.Update=function(t){var e=this;this.started&&this.systems.forEach(function(n){n.Update(t,e.GetAspects.apply(e,n.AspectType))})},t.prototype.GetAspects=function(){for(var t=this,e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];var r=new Array;return e.forEach(function(e){var n=t.GetComponentManager(e);null!==n&&r.push(n)}),this.GetAspectsByManagers.apply(this,r)},t.prototype.GetAspectsByManagers=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(0===t.length)throw new Error("No Component Managers passed!");var n=new Array,o=t.sort(function(t,e){return t.Count-e.Count})[0];return t=t.filter(function(t){return t!==o}),o.forEach(function(e){for(var o=new r.Aspect,i=e.EntityID,a=!0,s=0,c=t;s<c.length;s++){var u=c[s].getComponent(i);if(null===u){a=!1;break}o.Add(u)}a&&n.push(o)}),n},t}();e.Scene=a},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.prototype.Get=function(t){return this.filter(this.typeCheck(t)).ToArray()[0]},e.prototype.typeCheck=function(t){return function(e){return e instanceof t}},e}(n(0).HashSet);e.Aspect=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e,n,r){void 0===r&&(r=255),this.R=t,this.G=e,this.B=n,this.A=r}return Object.defineProperty(t.prototype,"R",{get:function(){return this.r},set:function(t){this.r=t%256},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"Red",{get:function(){return this.r},set:function(t){this.r=t%256},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"G",{get:function(){return this.g},set:function(t){this.g=t%256},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"Green",{get:function(){return this.g},set:function(t){this.g=t%256},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"B",{get:function(){return this.b},set:function(t){this.b=t%256},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"Blue",{get:function(){return this.b},set:function(t){this.b=t%256},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"A",{get:function(){return this.a},set:function(t){this.a=t%256},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"Alpha",{get:function(){return this.a},set:function(t){this.a=t%256},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"HexString",{get:function(){var t="#";return t+=this.r.toString(16),t+=this.g.toString(16),t+=this.b.toString(16),t+=this.a.toString(16)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"CssString",{get:function(){var t="rgba(";return t+=this.r+", ",t+=this.g+", ",t+=this.b+", ",t+=Math.round(this.a/255*100)/100+")"},enumerable:!0,configurable:!0}),t.FromHex=function(e){"#"===e.substr(0,1)&&(e=e.substr(1));var n=0,r=0,o=0,i=0;switch(e.length){case 1:n=parseInt(e+e),r=parseInt(e+e),o=parseInt(e+e),i=255;break;case 2:n=parseInt(e),r=parseInt(e),o=parseInt(e),i=255;break;case 3:n=parseInt(e[0]),r=parseInt(e[1]),o=parseInt(e[2]),i=255;break;case 4:n=parseInt(e[0]),r=parseInt(e[1]),o=parseInt(e[2]),i=parseInt(e[3]);break;case 6:n=parseInt(e[0]+e[1]),r=parseInt(e[2]+e[3]),o=parseInt(e[4]+e[5]),i=255;break;case 8:n=parseInt(e[0]+e[1]),r=parseInt(e[2]+e[3]),o=parseInt(e[4]+e[5]),i=parseInt(e[6]+e[7]);break;default:return new t(0,0,0,0)}return new t(n,r,o,i)},t.Red=new t(255,0,0),t.Green=new t(0,255,0),t.Blue=new t(0,0,255),t.Yellow=new t(255,255,0),t.Magenta=new t(255,0,255),t.Cyan=new t(0,255,255),t.White=new t(255,255,255),t.Black=new t(0,0,0),t.Transparent=new t(0,0,0,0),t}();e.Color=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.StartApp=function(t,e){void 0===e&&(e={renderTarget:"2d",frameRate:60,fpsLocked:!0,updateRate:60}),t.PreInit(e);var n=1e3/e.frameRate,r=1e3;e.fpsLocked||(r=1e3/e.updateRate),t.Init(n,r),e.fpsLocked||(t.UpdateInterval=setInterval(function(){t.Update()},r)),t.DrawInterval=setInterval(function(){e.fpsLocked&&t.Update(),t.Draw()},n),t.PostInit()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,